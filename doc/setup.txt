Setting up Go environment
-------------------------

1. Install Go tools from https://golang.org/doc/install
   If you need to cross-compile to other platforms, install from source. 
   Otherwise the binary install is fine
2. If you don't have a GOPATH already:
   a. Create a folder somewhere in your user area, e.g. ~/Go
   b. Create subfolders 'src', 'bin' and 'pkg'
   c. Create an environment variable GOPATH pointing at the root dir e.g. ~/Go
      On Windows, open Control Panel > System > Advanced > Environment variables
      On Mac/Linux, edit ~/.profile or ~/.bash_profile and export GOPATH=blah
   d. If you wish, add $GOPATH/bin to your PATH the same way
3. If you want to cross-compile, install Gox (https://github.com/mitchellh/gox)
    go get github.com/mitchellh/gox
4. Make sure you cloned git-lob into $GOPATH/src/bitbucket.org/sinbad/git-lob 

A note about godep
------------------

In order to simplify setup, all 3rd-party dependencies are captured inside
this repo using 'godep save -r'. See https://github.com/tools/godep

'godep save' copies your dependencies from GOPATH into a _workspace subdir of
the repo, snapshotting the dependencies and making it easier to set up the 
project. 
In addition, it's really useful for when you fork repos but don't change
the library name (say because you're hoping the pull requests get accepted,
see https://blog.splice.com/contributing-open-source-git-repositories-go/)

The '-r' parameter re-writes import statements in git-lob to refer directly
to the internal version, which means anyone building it doesn't have to 
use 'godep restore' (which copies the internal version into their GOPATH, 
which they might not want if other projects use a common lib), or the 
alternative which is to add _workspace to your GOPATH, or to prefix all
go commands with godep e.g. 'godep go build'. Rewriting the imports just
means everything works as if nothing happened. 
